Stats - 1
=========

- AlphaBeta Linear + Slow evaluation method
- 5-plies (mid-game) time: 121,018 ms
- 4-plied (mid-game) time: 2,249 ms

Stats - 2
=========

- AlphaBeta (parallel?), No Quiescence
- 6-plies (mid-game) time: 148,860 ms

Stats - 3
=========

- Iterative Deepening AlphaBeta Linear + Transposition Tables
- 6-plies mid-game time: 267,398 ms
- 5-plies mid-game time: 25,918 ms

Stats - 4
=========
(16 Jul 2013 at 8:25am)

- AlphaBeta + TT
- 6-plies mid-game time: ~72 secs

(Following are all 6-plies from start position, not mid-game)

- AlphaBeta Parallel: 13,157 ms
- AlphaBeta TT Parallel: 14,024 ms 
- AlphaBeta: 25,905 ms
- AlphaBeta TT: 27,435 ms
- Iterative Deepening + AlphaBeta (Parallel): 16,494 ms
- Iterative Deepening: 31,038 ms

Stats - 5
=========
(16 Jul 2013 in evening)

(Following ar all 6-plies mid-game)

- AlphaBeta Parallel: 72,060 ms
- AlphaBeta TT Parallel (with move re-ordering): 59,335 ms
^^^^^^^^^^^ RESULT ^^^^^^^^^^^^^^^
18% speed gain when using TTs with AB search!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- AlphaBeta TT Parallel (without move re-ordering): 58,577 ms 
----> Very slight speed gain by taking out move re-ordering!
- Iterative Deepening without move re-ordering: 68, 595 ms

- AlphaBeta TT Parallel + After converting Move class's square position from Int32 to byte: 46,373 ms!!
- (same as above for 5-plies): 4,808 ms
- (same as above for 6-plies from starting position): 9,920 ms
- (same as above for 5-plies from starting position): 1,253 ms
^^^^^^^^^^^^ RESULT^^^^^^^^^^^^^^^^^^^^^^^^^
~21% speed gain by replacing Int32 with byte!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Stats - 6
=========
(17 Jul 2013 at 6:10 pm)

- AlphaBeta TT Parallel + Killer Heuristic
- 6-plies mid-game: 15,871 ms
- 5-plies mid-game: 2,075 ms
- 6-plies from start position: 2,670 ms
- 5-plies from start position: 359 ms (~0.3 secs)
^^^^^^^^^^^^^ RESULT ^^^^^^^^^^^^^^^^^^^^^^^^^
65.78% speed gain from Killer Heuristic!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Iterative Deepening Parallel + Mid-Game + 6-plies + Killers + No TT Re-ordering: 18,768 ms
Iterative Deepening Parallel + Mid-Game + 6-plies + Killers + With TT Re-ordering: 18,716 ms
^^^^^^^^^^^^ RESULT^^^^^^^^^^^^^^^^^^^^^^^^^^^
TT Move Re-ordering has no impact even on Iterative Deepening
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Stats - 7
=========
(date: some time in 20s of July 2013, before Stats 8)

- New Move Format: each move is UInt16 and move gen returns array rather than List.
    
    > mid-game + 6 plies + ABTTParallel: 10,632 ms
	(down from 15,871 ms = 33% gain)
    > mid-game + 5 plies + ABTTParallel: 1,421 ms
	(down from 2,075 ms = 31% gain)
    > start position + 6 plies + ABTTParallel: 1,867 ms
	(down from 2,670 ms = ~30% gain)
    > start position + 5 plies + ABTTParallel: 280 ms
	(down from 359 ms = ~22% gain)

Stats - 8
=========
(date: some time in 20s of July 2013)

- After Move reordering putting capture moves first:

    > mid-game + 6plies+ AlphaBetaTTParallel: 5,400 ms
        (down from 10632 ms = 49.2% improvement)
    > mid-game + 5 plies + ABTTParallel: 904 ms
        (down from 1,421 ms = 36.4% improvement)
    > start position + 6 plies + ABTTParallel: 1,453 ms
        (down from 1,867 ms)
    > start position + 5 plies + ABTTParallel: 237 ms
        (down from 280 ms)

Stats - 9
=========
(date: 2 Aug 2013)

- After adding Aspiration Search in Iterative Deepening

    > mid-game + 7 plies + Iterative Deepening Aspiration Search (with bugs): 33,960 ms
    > mid-game + 7 plies + ID without AS: 61,938 ms
    > mid-game + 7 plies + ABTTParallel: 55,189 ms

(after fixing IDAS)
    > mid-game + 8 plies + IDAS: 24,960 ms
    > mid-game + 8 plies + ABTTPArallel: 157,562 ms
